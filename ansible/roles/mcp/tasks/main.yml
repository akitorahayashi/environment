- name: "Copy base MCP configuration"
  ansible.builtin.copy:
    src: "{{ config_dir_abs_path }}/mcp/servers.json"
    dest: "{{ ansible_env.HOME }}/.mcp.json"
    mode: '0644'

- name: "Substitute environment variables in MCP configuration"
  ansible.builtin.replace:
    path: "{{ ansible_env.HOME }}/.mcp.json"
    regexp: '\$\{GITHUB_PERSONAL_ACCESS_TOKEN\}'
    replace: "{{ lookup('env', 'GITHUB_PERSONAL_ACCESS_TOKEN') }}"
  when: lookup('env', 'GITHUB_PERSONAL_ACCESS_TOKEN') != ""

- name: "Check for existing Codex configuration"
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.codex/config.toml"
    follow: true
  register: codex_config_stat

- name: "Load Codex configuration for MCP synchronization"
  when: codex_config_stat.stat.exists
  block:
    - name: "Slurp processed MCP server catalogue"
      ansible.builtin.slurp:
        src: "{{ ansible_env.HOME }}/.mcp.json"
      register: mcp_servers_slurp

    - name: "Parse MCP server catalogue"
      ansible.builtin.set_fact:
        mcp_authoritative_servers: "{{ (mcp_servers_slurp.content | b64decode | from_json).mcpServers | default({}) }}"

    - name: "Initialize transformed MCP server map"
      ansible.builtin.set_fact:
        mcp_transformed_servers: {}

    - name: "Transform MCP server definitions for Codex"
      ansible.builtin.set_fact:
        mcp_transformed_servers: "{{ mcp_transformed_servers | combine({item.key: transformed_value}) }}"
      loop: "{{ mcp_authoritative_servers | dict2items }}"
      vars:
        transformed_value: >-
          {{
            dict(
              []
              + ([('type', item.value.type)] if item.value.type is defined and item.value.type is not none else [])
              + ([('command', item.value.command)] if item.value.command is defined and item.value.command else [])
              + ([('args', item.value.args)] if item.value.args is defined and item.value.args else [])
              + ([('env', item.value.env)] if item.value.env is defined and item.value.env else [])
              + ([('timeout', item.value.timeout)] if item.value.timeout is defined and item.value.timeout is not none else [])
            )
          }}

    - name: "Sort MCP server entries by name"
      ansible.builtin.set_fact:
        mcp_transformed_servers_sorted: "{{ mcp_transformed_servers | dict2items | sort(attribute='key') | items2dict }}"

    - name: "Render MCP servers TOML block"
      ansible.builtin.set_fact:
        mcp_servers_toml_block: "{{ lookup('template', 'mcp_servers_block.j2') }}"

    - name: "Ensure Codex MCP servers block is synchronized"
      ansible.builtin.blockinfile:
        path: "{{ codex_config_stat.stat.path }}"
        marker: "# {mark} MCP servers (managed by Ansible)"
        block: "{{ mcp_servers_toml_block }}"
        insertafter: EOF
        create: true
      register: mcp_servers_block_result

    - name: "Report Codex MCP synchronization outcome"
      ansible.builtin.debug:
        msg: "{{ 'Codex MCP configuration updated with authoritative server definitions.' if mcp_servers_block_result.changed else 'Codex MCP configuration already aligned with authoritative server definitions.' }}"

- name: "Report Codex MCP synchronization skipped"
  ansible.builtin.debug:
    msg: "Codex configuration not found; skipping MCP server synchronization."
  when: not codex_config_stat.stat.exists
