---
name: mac-mini-services
services:
  nexus:
    image: "{{ services_mac_mini_nexus_image }}"
    container_name: mac-mini-nexus
    restart: unless-stopped
    ports:
      - "{{ services_mac_mini_nexus_host_port }}:8000"
    environment:
      NEXUS_APP_NAME: "nexus"
      NEXUS_BIND_IP: "0.0.0.0"
      NEXUS_BIND_PORT: 8000
      NEXUS_LLM_BACKEND: "{{ services_mac_mini_nexus_backend }}"
      NEXUS_TIMEOUT: "{{ services_mac_mini_nexus_timeout }}"
      NEXUS_USE_MOCK_OLLAMA: "false"
      NEXUS_USE_MOCK_MLX: "false"
      NEXUS_OLLAMA_HOST: "http://host.docker.internal:{{ services_mac_mini_ollama_service_port }}"
      NEXUS_OLLAMA_MODEL: "{{ services_mac_mini_nexus_ollama_model }}"
      NEXUS_MLX_HOST: "http://host.docker.internal:{{ services_mac_mini_mlx_service_port }}"
      NEXUS_MLX_MODEL: "{{ services_mac_mini_mlx_model }}"
    healthcheck:
      test:
        - "CMD-SHELL"
        - "python -c \"import urllib.request, sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode() == 200 else 1)\""
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s

  starprobe:
    image: "{{ services_mac_mini_starprobe_image }}"
    container_name: mac-mini-starprobe
    restart: unless-stopped
    depends_on:
      nexus:
        condition: service_started
    ports:
      - "{{ services_mac_mini_starprobe_host_port }}:8000"
    environment:
      STARPROBE_PROJECT_NAME: "starprobe"
      STARPROBE_BIND_IP: "0.0.0.0"
      STARPROBE_BIND_PORT: 8000
      STARPROBE_LLM_BACKEND: "{{ services_mac_mini_starprobe_backend }}"
      STARPROBE_USE_MOCK_NEXUS: "{{ services_mac_mini_starprobe_use_mock_nexus | ternary('true', 'false') }}"
      STARPROBE_USE_MOCK_SEARCH: "{{ services_mac_mini_starprobe_use_mock_search | ternary('true', 'false') }}"
      STARPROBE_USE_MOCK_SCRAPING: "{{ services_mac_mini_starprobe_use_mock_scraping | ternary('true', 'false') }}"
      NEXUS_BASE_URL: "{{ services_mac_mini_nexus_internal_url }}"

  postgres:
    image: "{{ services_mac_mini_postgres_image }}"
    container_name: mac-mini-postgres
    restart: unless-stopped
    ports:
      - "{{ services_mac_mini_postgres_host_port }}:5432"
    environment:
      POSTGRES_DB: "{{ services_mac_mini_postgres_db }}"
      POSTGRES_USER: "{{ services_mac_mini_postgres_user }}"
      POSTGRES_PASSWORD: "{{ services_mac_mini_postgres_password }}"
    volumes:
      - "{{ services_mac_mini_postgres_volume }}:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "{{ services_mac_mini_postgres_user }}", "-d", "{{ services_mac_mini_postgres_db }}"]
      interval: 20s
      timeout: 5s
      retries: 6
      start_period: 10s

  redis:
    image: "{{ services_mac_mini_redis_image }}"
    container_name: mac-mini-redis
    restart: unless-stopped
    ports:
      - "{{ services_mac_mini_redis_host_port }}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  obs-glx-api:
    image: "{{ services_mac_mini_obs_glx_api_image }}"
    container_name: mac-mini-obs-glx-api
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      starprobe:
        condition: service_started
      nexus:
        condition: service_started
    ports:
      - "{{ services_mac_mini_obs_glx_host_port }}:8000"
    environment:
      OBS_GLX_PROJECT_NAME: "{{ services_mac_mini_obs_glx_project_name }}"
      OBS_GLX_USE_SQLITE: "false"
      OBS_GLX_USE_MOCK_STARPROBE: "{{ services_mac_mini_obs_glx_use_mock_starprobe | ternary('true', 'false') }}"
      OBS_GLX_USE_MOCK_GITHUB: "{{ services_mac_mini_obs_glx_use_mock_github | ternary('true', 'false') }}"
      OBS_GLX_USE_MOCK_NEXUS: "{{ services_mac_mini_obs_glx_use_mock_nexus | ternary('true', 'false') }}"
      OBS_GLX_TOKEN: "{{ services_mac_mini_obs_glx_token }}"
      OBS_GLX_REDIS_HOST: "redis"
      OBS_GLX_REDIS_PORT: 6379
      OBS_GLX_CELERY_BROKER_URL: "redis://redis:6379/0"
      OBS_GLX_CELERY_RESULT_BACKEND: "redis://redis:6379/0"
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: 5432
      POSTGRES_DB: "{{ services_mac_mini_postgres_db }}"
      POSTGRES_USER: "{{ services_mac_mini_postgres_user }}"
      POSTGRES_PASSWORD: "{{ services_mac_mini_postgres_password }}"
      NEXUS_BASE_URL: "{{ services_mac_mini_nexus_internal_url }}"
      STARPROBE_API_URL: "{{ services_mac_mini_starprobe_internal_url }}"
    healthcheck:
      test:
        - "CMD-SHELL"
        - "python -c \"import urllib.request, sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode() == 200 else 1)\""
      interval: 30s
      timeout: 10s
      retries: 6
      start_period: 60s

  obs-glx-worker:
    image: "{{ services_mac_mini_obs_glx_worker_image }}"
    container_name: mac-mini-obs-glx-worker
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      obs-glx-api:
        condition: service_started
    environment:
      OBS_GLX_PROJECT_NAME: "{{ services_mac_mini_obs_glx_project_name }}"
      OBS_GLX_USE_SQLITE: "false"
      OBS_GLX_USE_MOCK_STARPROBE: "{{ services_mac_mini_obs_glx_use_mock_starprobe | ternary('true', 'false') }}"
      OBS_GLX_USE_MOCK_GITHUB: "{{ services_mac_mini_obs_glx_use_mock_github | ternary('true', 'false') }}"
      OBS_GLX_USE_MOCK_NEXUS: "{{ services_mac_mini_obs_glx_use_mock_nexus | ternary('true', 'false') }}"
      OBS_GLX_TOKEN: "{{ services_mac_mini_obs_glx_token }}"
      OBS_GLX_REDIS_HOST: "redis"
      OBS_GLX_REDIS_PORT: 6379
      OBS_GLX_CELERY_BROKER_URL: "redis://redis:6379/0"
      OBS_GLX_CELERY_RESULT_BACKEND: "redis://redis:6379/0"
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: 5432
      POSTGRES_DB: "{{ services_mac_mini_postgres_db }}"
      POSTGRES_USER: "{{ services_mac_mini_postgres_user }}"
      POSTGRES_PASSWORD: "{{ services_mac_mini_postgres_password }}"
      NEXUS_BASE_URL: "{{ services_mac_mini_nexus_internal_url }}"
      STARPROBE_API_URL: "{{ services_mac_mini_starprobe_internal_url }}"
    volumes:
      - "{{ services_mac_mini_obs_glx_tmp_volume }}:/tmp/obsidian-workflows"

volumes:
  {{ services_mac_mini_postgres_volume }}:
    driver: local
  {{ services_mac_mini_obs_glx_tmp_volume }}:
    driver: local
