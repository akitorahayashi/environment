name: Notify Setup Completion

on:
  workflow_call:
    inputs:
      job_status:
        required: true
        type: string
      job_name:
        required: true
        type: string
    secrets:
      repo_token:
        required: true

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Post comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.repo_token }}
          script: |
            const prNumber = ${{ github.event.pull_request.number }};
            const jobStatus = '${{ inputs.job_status }}';
            const jobName = '${{ inputs.job_name }}';
            
            // コメント本文の構築
            let commentBody = `## macOS Setup Test Results\n\n`;
            commentBody += `**Status**: ${jobStatus === 'success' ? '✅ Success' : '❌ Failed'}\n\n`;
            commentBody += `**Job**: ${jobName}\n\n`;
            
            // 成功時のメッセージ
            if (jobStatus === 'success') {
              commentBody += `### ✅ All Setup Tests Passed\n\n`;
              commentBody += `The following components were successfully verified:\n`;
              commentBody += `- Shell setup\n`;
              commentBody += `- Mac setup\n`;
              commentBody += `- Homebrew setup\n`;
              commentBody += `- Xcode installation\n`;
              commentBody += `- Git setup\n`;
              commentBody += `- Flutter setup\n\n`;
              commentBody += `All components are properly configured and ready to use.`;
            } else {
              // 失敗時のメッセージ
              commentBody += `### ❌ Setup Tests Failed\n\n`;
              commentBody += `One or more setup tests failed. Please check the workflow logs for details.\n\n`;
              commentBody += `**Next Steps**:\n`;
              commentBody += `1. Review the workflow logs for specific failure details\n`;
              commentBody += `2. Fix any identified issues\n`;
              commentBody += `3. Push changes to trigger a new test run`;
            }
            
            // 既存のコメントを検索
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            // 既存のコメントを更新または新規作成
            const existingComment = comments.data.find(comment => 
              comment.body.includes('## macOS Setup Test Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            } 