name: Notify Completion

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'The number of the pull request'
        required: true
        type: number
      copilot_review_result:
        description: 'Result of the Copilot review job'
        required: true
        type: string # success, failure, skipped, cancelled
      macos_test_result:
        description: 'Result of the macOS setup test job'
        required: true
        type: string # success, failure, skipped, cancelled
    secrets:
      repo_token:
        description: 'GitHub Token for API calls'
        required: true

jobs:
  notify:
    runs-on: ubuntu-latest
    permissions:
      # PRへのコメント投稿/更新に必要
      pull-requests: write
      
    steps:
      - name: Construct Comment Body
        id: construct_comment
        run: |
          overall_status="✅ Success"
          summary="### CI/CD パイプライン実行結果\n\n"
          
          # Copilotレビューのステータス
          if [[ "${{ inputs.copilot_review_result }}" == "success" ]]; then
            summary+="- ✅ Copilot レビューリクエスト: 成功\n"
          elif [[ "${{ inputs.copilot_review_result }}" == "skipped" ]]; then
            summary+="- ⏭️ Copilot レビューリクエスト: スキップ\n"
          else
            summary+="- ❌ Copilot レビューリクエスト: 失敗\n"
            overall_status="❌ Failure"
          fi
          
          # macOSテストのステータス
          if [[ "${{ inputs.macos_test_result }}" == "success" ]]; then
            summary+="- ✅ macOS セットアップテスト: 成功\n"
          elif [[ "${{ inputs.macos_test_result }}" == "skipped" ]]; then
            summary+="- ⏭️ macOS セットアップテスト: スキップ\n"
          else
            summary+="- ❌ macOS セットアップテスト: 失敗\n"
            overall_status="❌ Failure"
          fi
          
          # 全体的なステータスメッセージを設定
          summary+="\n**Overall Status: ${overall_status}**"
          
          # GITHUB_OUTPUTの準備 (複数行)
          echo "summary_body<<EOF" >> $GITHUB_OUTPUT
          echo "$summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Post or Update Completion Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.repo_token }}
          script: |
            const issue_number = ${{ inputs.pr_number }};
            const body = `${{ steps.construct_comment.outputs.summary_body }}`;
            const marker = "<!-- ci-status-summary -->"; // コメントを見つけるための隠しマーカー
            const comment_body = marker + '\n\n' + body;

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
            });

            const existing_comment = comments.data.find(comment => comment.body.includes(marker));

            if (existing_comment) {
              console.log(`Updating existing comment (ID: ${existing_comment.id})`);
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing_comment.id,
                body: comment_body
              });
            } else {
              console.log("Posting new comment");
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                body: comment_body
              });
            } 