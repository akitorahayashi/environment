name: Run Setup Tests

on:
  workflow_call:
    secrets:
      repo_token:
        description: 'GitHub Token for authentication'
        required: true

jobs:
  setup-test:
    runs-on: macos-latest
    timeout-minutes: 120
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set CI environment variables
        run: |
          echo "Setting up CI environment variables..."
          # Detect JAVA_HOME based on 'java' executable location if available
          if command -v java &> /dev/null; then
            JAVA_PATH=$(readlink -f $(which java))
            JAVA_HOME_DETECTED=$(dirname $(dirname "$JAVA_PATH"))
            echo "JAVA_HOME=${JAVA_HOME_DETECTED}" >> $GITHUB_ENV
            echo "Detected JAVA_HOME: ${JAVA_HOME_DETECTED}"
          else
            echo "Warning: 'java' command not found, skipping JAVA_HOME detection."
          fi
          echo "ANDROID_SDK_ROOT=${HOME}/Library/Android/sdk" >> $GITHUB_ENV
          echo "REPO_ROOT=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
          echo "IS_CI=true" >> $GITHUB_ENV
          echo "ALLOW_COMPONENT_FAILURE=true" >> $GITHUB_ENV
          echo "GITHUB_TOKEN_CI=${{ secrets.repo_token }}" >> $GITHUB_ENV # Ensure token is available if needed by scripts
          echo "✅ CI environment variables set up"
        shell: bash

      - name: Cache FVM Flutter SDKs
        uses: actions/cache@v4
        id: cache-fvm
        with:
          path: $HOME/fvm
          key: ${{ runner.os }}-fvm-${{ hashFiles('.fvm/fvm_config.json') }} # .fvm 設定ファイルに基づいてキーを生成 (存在しない場合はOSのみ)
          restore-keys: |
            ${{ runner.os }}-fvm-

      - name: Cache Pub dependencies
        uses: actions/cache@v4
        id: cache-pub
        with:
          path: $HOME/.pub-cache
          # pubspec.lock がルートにないため、Flutterバージョン(fvm cache key)かOS名でキーを生成
          key: ${{ runner.os }}-pub-${{ steps.cache-fvm.outputs.cache-hit != 'true' && '' || 'stable' }} # キーの一部としてfvmキャッシュヒット状況を使う例 (調整可能)
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.gradle/caches
            $HOME/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/gradle-wrapper.properties') }} # プロジェクト内のGradle関連ファイルを探す
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 1. Run initial installation test
        run: |
          echo "🚀 Running initial installation..."
          ./install.sh | tee install_output.log
          
          echo "🔍 Validating installation log..."
          if grep -q -E '(\[INSTALL\]|\[OK\].*setup|Start:)' install_output.log; then # Adjust grep pattern for new log format
            echo "✅ Installation messages found"
          else
            echo "❌ Installation messages not found"
            echo "=== Installation output sample (first 20 lines) ==="
            head -n 20 install_output.log
            exit 1
          fi
        shell: bash

      - name: 2. Run idempotency test
        run: |
          echo "🔍 Running idempotency test..."
          export IDEMPOTENT_TEST=true # Enable idempotent mode for install script
          ./install.sh | tee idempotent_output.log
          
          echo "🔍 Validating idempotency log..."
          # Check that installation messages are NOT present
          if grep -q 'Installing' idempotent_output.log; then
            echo "❌ Idempotency test failed: Installation messages found on second run"
            echo "--- Context ---"
            grep -A 3 -B 3 'Installing' idempotent_output.log
            echo "---------------"
            exit 1
          else
            echo "✅ Confirmed no installation messages (idempotency)"
          fi
          
          # Check that skip messages ARE present
          if grep -q -E '(already installed|Skipping)' idempotent_output.log; then
            echo "✅ Appropriate skip messages found"
          else
            # This might be acceptable depending on the components, treat as warning for now
            echo "⚠️ Warning: Skip messages not found. Continuing idempotency verification."
          fi
        shell: bash

      - name: 3.1 Verify Shell Setup
        run: |
          echo "🔍 Starting shell verification..."
          source scripts/utils/helpers.sh
          source scripts/utils/logging.sh
          source scripts/setup/shell.sh
          if verify_shell_setup; then
            log_success "Shell verification passed"
          else
            log_error "Shell verification failed"
            exit 1
          fi
        shell: bash

      - name: 3.2 Verify Mac Setup
        run: |
          echo "🔍 Starting Mac verification..."
          source scripts/utils/helpers.sh
          source scripts/utils/logging.sh
          source scripts/setup/mac.sh
          if verify_mac_setup; then
            log_success "Mac verification passed"
          else
            log_error "Mac verification failed"
            exit 1
          fi
        shell: bash

      - name: 3.3 Verify Homebrew Setup
        run: |
          echo "🔍 Starting Homebrew verification..."
          source scripts/utils/helpers.sh
          source scripts/utils/logging.sh
          source scripts/setup/homebrew.sh
          if verify_homebrew_setup; then
            log_success "Homebrew verification passed"
          else
            log_error "Homebrew verification failed"
            exit 1
          fi
        shell: bash

      - name: 3.4 Verify Xcode Installation
        run: |
          echo "🔍 Starting Xcode verification..."
          source scripts/utils/helpers.sh
          source scripts/utils/logging.sh
          source scripts/setup/xcode.sh
          if ! verify_xcode_installation; then
            log_error "Xcode body verification failed"
            exit 1
          fi
          log_success "Xcode verification passed"
        shell: bash

      - name: 3.5 Verify Git Setup
        run: |
          echo "🔍 Starting Git verification..."
          source scripts/utils/helpers.sh
          source scripts/utils/logging.sh
          source scripts/setup/git.sh
          if verify_git_setup; then
            log_success "Git verification passed"
          else
            log_error "Git verification failed"
            exit 1
          fi
        shell: bash

      - name: 3.6 Verify Flutter Setup
        run: |
          echo "🔍 Starting Flutter verification..."
          export PATH="$HOME/fvm/default/bin:$PATH"
          echo "[DEBUG] PATH set for step: $PATH"

          echo "[INFO] Running flutter --version for basic verification..."
          if flutter --version; then
              echo "[OK] flutter --version completed successfully."
          else
              exit_code=$?
              echo "[ERROR] flutter --version failed with exit code $exit_code."
              exit 1
          fi
        shell: bash

      - name: 3.8 Verification Summary
        run: |
          echo "======================"
          echo "✅ All verification steps passed successfully!"
          echo "🎉 All tests passed successfully!"
        shell: bash 