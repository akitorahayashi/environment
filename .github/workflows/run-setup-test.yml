name: Run Setup Tests

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  setup-test:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set CI environment variables
        run: |
          echo "Setting up CI environment variables..."
          # Detect JAVA_HOME based on 'java' executable location if available
          if command -v java &> /dev/null; then
            JAVA_PATH=$(readlink -f $(which java))
            JAVA_HOME_DETECTED=$(dirname $(dirname "$JAVA_PATH"))
            echo "JAVA_HOME=${JAVA_HOME_DETECTED}" >> $GITHUB_ENV
            echo "Detected JAVA_HOME: ${JAVA_HOME_DETECTED}"
          else
            echo "Warning: 'java' command not found, skipping JAVA_HOME detection."
          fi
          echo "ANDROID_SDK_ROOT=${HOME}/Library/Android/sdk" >> $GITHUB_ENV
          echo "REPO_ROOT=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
          echo "IS_CI=true" >> $GITHUB_ENV
          echo "ALLOW_COMPONENT_FAILURE=true" >> $GITHUB_ENV
          echo "‚úÖ CI environment variables set up"
        shell: bash

      - name: Cache FVM Flutter SDKs
        uses: actions/cache@v4
        id: cache-fvm
        with:
          path: $HOME/fvm
          key: ${{ runner.os }}-fvm-${{ hashFiles('.fvm/fvm_config.json') }}
          restore-keys: |
            ${{ runner.os }}-fvm-

      - name: Cache Pub dependencies
        uses: actions/cache@v4
        id: cache-pub
        with:
          path: $HOME/.pub-cache
          key: ${{ runner.os }}-pub-${{ steps.cache-fvm.outputs.cache-hit != 'true' && '' || 'stable' }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.gradle/caches
            $HOME/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make scripts executable
        run: |
          echo "Making setup scripts executable..."
          chmod +x scripts/setup/*.sh
          chmod +x install.sh
          echo "‚úÖ Scripts are now executable"

      - name: Run initial installation test
        run: |
          echo "üöÄ Running initial installation..."
          ./install.sh | tee install_output.log
          
          echo "üîç Validating installation log..."
          if grep -q -E '(\[INSTALL\]|\[OK\].*setup|Start:)' install_output.log; then
            echo "‚úÖ Installation messages found"
          else
            echo "‚ùå Installation messages not found"
            echo "=== Installation output sample (first 20 lines) ==="
            head -n 20 install_output.log
            exit 1
          fi
        shell: bash

      - name: Run idempotency test
        run: |
          echo "üîç Running idempotency test..."
          export IDEMPOTENT_TEST=true
          ./install.sh | tee idempotent_output.log
          
          echo "üîç Validating idempotency log..."
          if grep -q 'Installing' idempotent_output.log; then
            echo "‚ùå Idempotency test failed: Installation messages found on second run"
            echo "--- Context ---"
            grep -A 3 -B 3 'Installing' idempotent_output.log
            echo "---------------"
            exit 1
          else
            echo "‚úÖ Confirmed no installation messages (idempotency)"
          fi
          
          if grep -q -E '(already installed|Skipping)' idempotent_output.log; then
            echo "‚úÖ Appropriate skip messages found"
          else
            echo "‚ö†Ô∏è Warning: Skip messages not found. Continuing idempotency verification."
          fi
        shell: bash

      - name: Verify Shell Setup
        run: |
          echo "üîç Verifying shell configuration..."
          source ./scripts/setup/shell.sh
          if verify_shell_setup; then
            echo "‚úÖ Shell verification passed"
          else
            echo "‚ùå Shell verification failed"
            exit 1
          fi
        shell: bash

      - name: Verify Mac Setup
        run: |
          echo "üîç Starting Mac verification..."
          source ./scripts/setup/mac.sh
          if verify_mac_setup; then
            echo "‚úÖ Mac verification passed"
          else
            echo "‚ùå Mac verification failed"
            exit 1
          fi
        shell: bash

      - name: Verify Homebrew Setup
        run: |
          echo "üîç Verifying Homebrew setup and packages..."
          source ./scripts/setup/homebrew.sh
          if verify_homebrew_setup && verify_brewfile "$REPO_ROOT/config/brew/Brewfile"; then
            echo "‚úÖ Homebrew verification passed"
          else
            echo "‚ùå Homebrew verification failed"
            exit 1
          fi
        shell: bash

      - name: Verify Git Setup
        run: |
          echo "üîç Verifying Git configuration..."
          source ./scripts/setup/git.sh
          if verify_git_setup; then
            echo "‚úÖ Git verification passed"
          else
            echo "‚ùå Git verification failed"
            exit 1
          fi
        shell: bash

      - name: Verify Flutter Setup
        run: |
          echo "üîç Starting Flutter verification..."
          export PATH="$HOME/fvm/default/bin:$PATH"
          source ./scripts/setup/flutter.sh
          if verify_flutter_setup; then
            echo "‚úÖ Flutter verification passed"
          else
            echo "‚ùå Flutter verification failed"
            exit 1
          fi
        shell: bash

      - name: Verify Node.js Setup
        run: |
          echo "üîç Starting Node.js verification..."
          source ./scripts/setup/node.sh
          if verify_node_setup; then
            echo "‚úÖ Node.js verification passed"
          else
            echo "‚ùå Node.js verification failed"
            exit 1
          fi
        shell: bash

      - name: Verify Ruby Setup
        run: |
          echo "üîç Verifying Ruby configuration..."
          source ./scripts/setup/ruby.sh
          if verify_ruby_setup; then
            echo "‚úÖ Ruby verification passed"
          else
            echo "‚ùå Ruby verification failed"
            exit 1
          fi
        shell: bash

      - name: Verify VS Code Setup
        run: |
          echo "üîç Verifying VS Code configuration..."
          source ./scripts/setup/vscode.sh
          if verify_vscode_setup; then
            echo "‚úÖ VS Code verification passed"
          else
            echo "‚ùå VS Code verification failed"
            exit 1
          fi
        shell: bash

      - name: Verify Cursor Setup
        run: |
          echo "üîç Verifying Cursor configuration..."
          source ./scripts/setup/cursor.sh
          if verify_cursor_setup; then
            echo "‚úÖ Cursor verification passed"
          else
            echo "‚ùå Cursor verification failed"
            exit 1
          fi
        shell: bash

      - name: Verification Summary
        run: |
          echo "======================"
          echo "‚úÖ All verification steps passed successfully!"
          echo "üéâ All tests passed successfully!"
        shell: bash 