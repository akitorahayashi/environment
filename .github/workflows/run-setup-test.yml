name: Run Setup Tests

on:
  workflow_call:
    secrets:
      repo_token:
        description: 'GitHub Token for authentication'
        required: true

jobs:
  setup-test:
    runs-on: macos-latest
    timeout-minutes: 120
    
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4 # v4を使用
      
      - name: GitHub認証の設定
        run: |
          # GitHubの認証を設定 (CI環境用)
          git config --global url."https://github-actions:${{ secrets.repo_token }}@github.com/".insteadOf "https://github.com/"
          echo "✅ CI環境用のGitHub認証を設定しました"

      - name: CI環境変数の設定
        run: |
          echo "Setting up CI environment variables..."
          # Detect JAVA_HOME based on 'java' executable location if available
          if command -v java &> /dev/null; then
            JAVA_PATH=$(readlink -f $(which java))
            JAVA_HOME_DETECTED=$(dirname $(dirname "$JAVA_PATH"))
            echo "JAVA_HOME=${JAVA_HOME_DETECTED}" >> $GITHUB_ENV
            echo "Detected JAVA_HOME: ${JAVA_HOME_DETECTED}"
          else
            echo "Warning: 'java' command not found, skipping JAVA_HOME detection."
          fi
          echo "ANDROID_SDK_ROOT=${HOME}/Library/Android/sdk" >> $GITHUB_ENV
          echo "REPO_ROOT=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
          echo "IS_CI=true" >> $GITHUB_ENV
          echo "ALLOW_COMPONENT_FAILURE=true" >> $GITHUB_ENV
          echo "GITHUB_TOKEN_CI=${{ secrets.repo_token }}" >> $GITHUB_ENV # Ensure token is available if needed by scripts
          echo "✅ CI環境変数を設定しました"
        shell: bash

      - name: Install stow
        run: brew install stow

      - name: 1. 初回インストールテストの実行
        run: |
          echo "🚀 初回インストールを実行しています..."
          ./install.sh | tee install_output.log
          
          echo "🔍 インストールログを検証中..."
          if grep -q -E '(をインストール中|📦|環境のセットアップ)' install_output.log; then
            echo "✅ インストールメッセージを確認しました"
          else
            echo "❌ インストールメッセージが見つかりませんでした"
            echo "=== インストール出力サンプル (最初の20行) ==="
            head -n 20 install_output.log
            exit 1
          fi
        shell: bash

      - name: 2. 冪等性テストの実行
        run: |
          echo "🔍 冪等性テストを実行しています..."
          export IDEMPOTENT_TEST=true # Enable idempotent mode for install script
          ./install.sh | tee idempotent_output.log
          
          echo "🔍 冪等性ログを検証中..."
          # Check that installation messages are NOT present
          if grep -q 'インストール中' idempotent_output.log; then
            echo "❌ 冪等性テスト失敗：2回目の実行でインストールメッセージが見つかりました"
            echo "--- Context ---"
            grep -A 3 -B 3 'インストール中' idempotent_output.log
            echo "---------------"
            exit 1
          else
            echo "✅ インストールメッセージがないことを確認しました (冪等性)"
          fi
          
          # Check that skip messages ARE present
          if grep -q -E '(すでにインストール済み|スキップ)' idempotent_output.log; then
            echo "✅ 適切なスキップメッセージが確認できました"
          else
            # This might be acceptable depending on the components, treat as warning for now
            echo "⚠️ 警告：スキップメッセージが見つかりませんでした。冪等性の確認は継続します。"
          fi
        shell: bash

      - name: Install stow
        run: brew install stow

      - name: 3.1 Verify Shell Setup
        run: |
          echo "🔍 シェルの検証を開始..."
          source scripts/utils/helpers.sh
          source scripts/utils/logging.sh
          source scripts/setup/shell.sh
          if verify_shell_setup; then
            log_success "シェルの検証に成功しました"
          else
            log_error "シェルの検証に失敗しました"
            exit 1
          fi
        shell: bash

      - name: 3.2 Verify Mac Setup
        run: |
          echo "🔍 Macの検証を開始..."
          source scripts/utils/helpers.sh
          source scripts/utils/logging.sh
          source scripts/setup/mac.sh
          if verify_mac_setup; then
            log_success "Macの検証に成功しました"
          else
            log_error "Macの検証に失敗しました"
            exit 1
          fi
        shell: bash

      - name: 3.3 Verify Homebrew Setup
        run: |
          echo "🔍 Homebrewの検証を開始..."
          source scripts/utils/helpers.sh
          source scripts/utils/logging.sh
          source scripts/setup/homebrew.sh
          if verify_homebrew_setup; then
            log_success "Homebrewの検証に成功しました"
          else
            log_error "Homebrewの検証に失敗しました"
            exit 1
          fi
        shell: bash

      - name: 3.4 Verify Xcode Installation
        run: |
          echo "🔍 Xcodeの検証を開始..."
          source scripts/utils/helpers.sh
          source scripts/utils/logging.sh
          source scripts/setup/xcode.sh
          if verify_xcode_installation; then
            log_success "Xcodeの検証に成功しました"
          else
            log_error "Xcodeの検証に失敗しました"
            exit 1
          fi
        shell: bash

      - name: 3.5 Verify Git Setup
        run: |
          echo "🔍 Gitの検証を開始..."
          source scripts/utils/helpers.sh
          source scripts/utils/logging.sh
          source scripts/setup/git.sh
          if verify_git_setup; then
            log_success "Gitの検証に成功しました"
          else
            log_error "Gitの検証に失敗しました"
            exit 1
          fi
        shell: bash

      - name: 3.6 Verify Flutter Setup
        run: |
          echo "🔍 Flutterの検証を開始..."
          source scripts/utils/helpers.sh
          source scripts/utils/logging.sh
          source scripts/setup/flutter.sh
          if verify_flutter_setup; then
            log_success "Flutterの検証に成功しました"
          else
            log_error "Flutterの検証に失敗しました"
            exit 1
          fi
        shell: bash

      - name: 3.7 Verify Neovim Setup
        run: |
          echo "🔍 Neovimの検証を開始..."
          source scripts/utils/helpers.sh
          source scripts/utils/logging.sh
          source scripts/setup/neovim.sh
          # Ensure REPO_ROOT is available for verify_neovim_setup
          export REPO_ROOT="${{ github.workspace }}"
          if verify_neovim_setup; then
            log_success "Neovimの検証に成功しました"
          else
            log_error "Neovimの検証に失敗しました"
            exit 1
          fi
        shell: bash

      - name: 3.8 Verification Summary
        run: |
          echo "======================"
          echo "✅ All verification steps passed successfully!"
          echo "🎉 すべてのテストが正常に完了しました！"
        shell: bash 