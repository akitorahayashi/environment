name: macOS環境構築のCI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手動実行も可能にする

jobs:
  test-install:
    runs-on: macos-latest
    timeout-minutes: 120  # Xcodeのインストールに時間がかかるため、タイムアウトを延長
    
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v3
      
      - name: GitHub認証の設定
        run: |
          # GitHubの認証を設定 (CI環境用)
          git config --global url."https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
          echo "✅ CI環境用のGitHub認証を設定しました"
      
      - name: インストールスクリプトの実行権限付与
        run: chmod +x install.sh
      
      - name: Homebrew PATHを確認（インストール前）
        run: |
          echo "現在の PATH: $PATH"
          which brew || echo "brewコマンドはまだ使用できません（期待通り）"
      
      - name: インストールスクリプトの実行
        run: |
          # インストールを直接実行
          ./install.sh
          
          # インストールスクリプトの終了コードを保存
          INSTALL_EXIT_CODE=$?
          
          echo "インストールスクリプトの終了コード: $INSTALL_EXIT_CODE"
          
          # スクリプトの終了ステータスを確認
          if [ $INSTALL_EXIT_CODE -ne 0 ]; then
            echo "❌ インストールスクリプトがエラーで終了しました"
            exit $INSTALL_EXIT_CODE
          fi
        env:
          CI: true  # CI環境であることを示す
          GITHUB_TOKEN_CI: ${{ secrets.GITHUB_TOKEN }}  # GitHub Actions提供のトークンをCI用の名前で渡す
      
      - name: Homebrew PATHを確認（インストール後）
        run: |
          echo "現在の PATH: $PATH"
          which brew && echo "✅ brewコマンドが正常に使用可能" || (echo "❌ brewコマンドが使用できません" && exit 1)
        
      - name: Homebrewのインストールの確認
        run: |
          # Homebrewのバージョンを確認
          if ! brew --version; then
            echo "❌ Homebrewのインストールに失敗しています"
            exit 1
          fi
          echo "✅ Homebrewが正常にインストールされています"
        
      - name: Xcodeのインストールを確認
        run: |
          # Xcode Command Line Toolsの確認
          if ! xcode-select -p &>/dev/null; then
            echo "❌ Xcode Command Line Toolsがインストールされていません"
            exit 1
          fi
          echo "✅ Xcode Command Line Toolsがインストールされています"
          
          # Xcode 16.2の確認
          if command -v xcodes &>/dev/null; then
            if ! xcodes installed | grep -q "16.2"; then
              echo "❌ Xcode 16.2がインストールされていません"
              exit 1
            fi
            echo "✅ Xcode 16.2がインストールされています"
          else
            echo "⚠️ xcodesコマンドが見つかりません。Xcode 16.2のインストール状態を確認できません"
          fi
          
          # シミュレータの確認
          if xcrun simctl list runtimes &>/dev/null; then
            echo "シミュレータの状態を確認中..."
            for platform in iOS watchOS tvOS visionOS; do
              if ! xcrun simctl list runtimes | grep -q "$platform"; then
                echo "⚠️ $platform シミュレータが見つかりません"
              else
                echo "✅ $platform シミュレータがインストールされています"
              fi
            done
          else
            echo "⚠️ simctlコマンドが使用できません。シミュレータの状態を確認できません"
          fi
      
      - name: SwiftLintのインストール確認
        run: |
          if ! command -v swiftlint &>/dev/null; then
            echo "❌ SwiftLintがインストールされていません"
            exit 1
          fi
          
          echo "✅ SwiftLintがインストールされています（バージョン: $(swiftlint version)）"
          
          # SwiftLintの動作確認
          echo "SwiftLintの簡単な動作テスト中..."
          echo 'class Test {}' > test.swift
          swiftlint lint test.swift || echo "⚠️ lintチェックでエラーが検出されました（テスト用なので問題ありません）"
          rm test.swift
          
          echo "✅ SwiftLintは正常に動作しています"
      
      - name: Git設定の確認
        run: |
          test -f ~/.gitconfig && echo "gitconfigが存在します ✅" || (echo "gitconfigが存在しません ❌" && exit 1)
          test -f ~/.gitignore_global && echo "gitignore_globalが存在します ✅" || (echo "gitignore_globalが存在しません ❌" && exit 1)
          
          # シンボリックリンクの検証
          if [ "$(readlink ~/.gitconfig)" = "$GITHUB_WORKSPACE/git/.gitconfig" ]; then
            echo "gitconfigのシンボリックリンクが正しく設定されています ✅"
          else
            echo "gitconfigのシンボリックリンクが正しくありません ❌"
            echo "実際のリンク先: $(readlink ~/.gitconfig)"
            exit 1
          fi
          
          if [ "$(readlink ~/.gitignore_global)" = "$GITHUB_WORKSPACE/git/.gitignore_global" ]; then
            echo "gitignore_globalのシンボリックリンクが正しく設定されています ✅"
          else
            echo "gitignore_globalのシンボリックリンクが正しくありません ❌"
            echo "実際のリンク先: $(readlink ~/.gitignore_global)"
            exit 1
          fi
          
          # excludesfileの設定確認
          if [ "$(git config --global core.excludesfile)" = "$HOME/.gitignore_global" ]; then
            echo "Gitのexcludesfileが正しく設定されています ✅"
          else
            echo "Gitのexcludesfileが正しく設定されていません ❌"
            exit 1
          fi
          
          echo "Git設定の確認が完了しました ✅"
      
      - name: シェルの設定の確認
        run: |
          test -f ~/.zprofile && echo ".zprofileが存在します ✅" || (echo ".zprofileが存在しません ❌" && exit 1)
          
          # シンボリックリンクの検証
          if [ "$(readlink ~/.zprofile)" = "$GITHUB_WORKSPACE/shell/.zprofile" ]; then
            echo ".zprofileのシンボリックリンクが正しく設定されています ✅"
          else
            echo ".zprofileのシンボリックリンクが正しくありません ❌"
            echo "実際のリンク先: $(readlink ~/.zprofile)"
            exit 1
          fi
          
          echo "シェルの設定の確認が完了しました ✅"
      
      - name: Homebrewパッケージの確認
        run: |
          echo "Brewfileに記載されたパッケージがインストールされているか確認します"
          
          # Brewfileの存在確認
          if [ ! -f "$GITHUB_WORKSPACE/config/Brewfile" ]; then
            echo "❌ Brewfileが見つかりません"
            exit 1
          fi
          
          # Brewfileに記載されたパッケージの総数を確認（コメント行と空行を除く）
          TOTAL_PACKAGES=$(grep -v "^#" "$GITHUB_WORKSPACE/config/Brewfile" | grep -v "^$" | grep -c "brew\|cask" || echo "0")
          echo "Brewfileに記載されたパッケージ数: $TOTAL_PACKAGES"
          
          # インストールされているパッケージを確認
          INSTALLED_FORMULAE=$(brew list --formula | wc -l | tr -d ' ')
          INSTALLED_CASKS=$(brew list --cask | wc -l | tr -d ' ')
          TOTAL_INSTALLED=$((INSTALLED_FORMULAE + INSTALLED_CASKS))
          
          echo "インストールされたパッケージ数: $TOTAL_INSTALLED (formulae: $INSTALLED_FORMULAE, casks: $INSTALLED_CASKS)"
          
          # 個別パッケージの確認
          while IFS= read -r line; do
            # コメント行と空行をスキップ
            [[ $line =~ ^#.*$ ]] && continue
            [[ -z $line ]] && continue
            
            # brew または cask の行を抽出
            if [[ $line =~ ^brew\ \"([^\"]*)\" ]]; then
              package="${BASH_REMATCH[1]}"
              
              if ! brew list --formula "$package" &>/dev/null; then
                echo "❌ formula $package がインストールされていません"
                exit 1
              fi
              echo "✅ formula $package がインストールされています"
            elif [[ $line =~ ^cask\ \"([^\"]*)\" ]]; then
              package="${BASH_REMATCH[1]}"
              if ! brew list --cask "$package" &>/dev/null; then
                echo "❌ cask $package がインストールされていません"
                exit 1
              fi
              echo "✅ cask $package がインストールされています"
            fi
          done < "$GITHUB_WORKSPACE/config/Brewfile"
          
          echo "Homebrewパッケージの確認が完了しました ✅"
      
      - name: Flutterの設定の確認
        run: |
          if ! command -v flutter &>/dev/null; then
            echo "❌ Flutterがインストールされていません"
            exit 1
          fi
          
          echo "✅ Flutterがインストールされています"
          
          # Flutterのパスを確認
          FLUTTER_PATH=$(which flutter)
          echo "Flutter PATH: $FLUTTER_PATH"
          
          # パスが正しいか確認 - 標準のHomebrewバイナリパスであることを確認
          if [[ "$FLUTTER_PATH" != "/opt/homebrew/bin/flutter" ]]; then
            echo "❌ Flutterのパスが想定と異なります"
            echo "期待: /opt/homebrew/bin/flutter"
            echo "実際: $FLUTTER_PATH"
            exit 1
          fi
          echo "✅ Flutterのパスが正しく設定されています"
          
          # Flutter doctorを実行して機能確認
          echo "flutter doctor を実行中..."
          if ! flutter doctor -v; then
            echo "❌ flutter doctorの実行に失敗しました"
            exit 1
          fi
          
          # Xcodeの確認
          if ! flutter doctor -v | grep -q "Xcode"; then
            echo "❌ Xcodeが見つかりません"
            exit 1
          fi
          
          echo "✅ Flutterの設定が完了しました"
      
      - name: Cursorの設定の確認
        run: |
          # Cursorがインストールされているか確認
          if ! brew list cursor &>/dev/null; then
            echo "❌ Cursorがインストールされていません"
            exit 1
          fi
          echo "✅ Cursorがインストールされています"
          
          # Cursor設定ディレクトリの確認
          CURSOR_CONFIG_DIR="$HOME/Library/Application Support/Cursor/User"
          mkdir -p "$CURSOR_CONFIG_DIR"
          
          # リポジトリに設定ファイルが存在するか確認
          if [ -d "$GITHUB_WORKSPACE/cursor" ]; then
            echo "✅ Cursorの設定ディレクトリが存在します"
            
            # extensions.jsonの確認
            if [ -f "$GITHUB_WORKSPACE/cursor/extensions.json" ]; then
              echo "✅ extensions.jsonファイルが存在します"
              
              # 拡張機能IDの形式を確認
              if grep -q "Dart-Code.dart-code" "$GITHUB_WORKSPACE/cursor/extensions.json"; then
                echo "✅ 拡張機能IDの大文字小文字が正しく設定されています"
              else
                echo "⚠️ 拡張機能IDの大文字小文字に問題がある可能性があります"
                cat "$GITHUB_WORKSPACE/cursor/extensions.json"
              fi
              
              # 推奨拡張機能の数を確認
              EXTENSION_COUNT=$(grep -o '"[^"]*"' "$GITHUB_WORKSPACE/cursor/extensions.json" | grep -v "recommendations" | wc -l | tr -d ' ')
              echo "🧩 $EXTENSION_COUNT 個の拡張機能が定義されています"
              
              # Cursorコマンドラインツールのパス
              CURSOR_CLI="/Applications/Cursor.app/Contents/Resources/app/bin/cursor"
              
              # 拡張機能のインストール状態を確認
              if [ -f "$CURSOR_CLI" ]; then
                echo "✅ Cursor CLIが利用可能です"
                
                # インストールされた拡張機能を確認
                INSTALLED_EXTENSIONS=$("$CURSOR_CLI" --list-extensions 2>/dev/null || echo "")
                echo "インストールされた拡張機能:"
                echo "$INSTALLED_EXTENSIONS"
                
                # extensions.jsonの拡張機能がインストールされているか確認
                EXTENSIONS=$(grep -o '"[^"]*"' "$GITHUB_WORKSPACE/cursor/extensions.json" | grep -v "recommendations" | tr -d '"')
                for extension in $EXTENSIONS; do
                  if echo "$INSTALLED_EXTENSIONS" | grep -qi "$extension"; then
                    echo "✅ 拡張機能 $extension はインストールされています"
                  else
                    echo "⚠️ 拡張機能 $extension はインストールされていません"
                  fi
                done
              else
                echo "⚠️ Cursor CLIが見つかりません"
              fi
            else
              echo "⚠️ extensions.jsonファイルが見つかりません"
            fi
            
            # settings.jsonが作成されているか確認
            if [ -f "$GITHUB_WORKSPACE/cursor/settings.json" ]; then
              echo "✅ settings.jsonファイルが存在します"
              
              # Flutter SDKパスの設定チェック
              if grep -q "dart.flutterSdkPath" "$GITHUB_WORKSPACE/cursor/settings.json"; then
                echo "✅ Flutter SDKパス設定が存在します"
              else
                echo "⚠️ Flutter SDKパス設定が見つかりません"
              fi
            else
              echo "⚠️ settings.jsonファイルが見つかりません"
            fi
          else
            echo "⚠️ Cursorの設定ディレクトリが見つかりません"
          fi
          
          echo "✅ Cursorの設定確認が完了しました"
      
      - name: インストールしたCaskアプリの確認
        run: |
          echo "Brewfileに記載されたすべてのCaskアプリのインストール状態を確認します"
          
          # Brewfileから全てのcaskを抽出
          CASKS=$(grep '^cask "' "$GITHUB_WORKSPACE/config/Brewfile" | awk -F'"' '{print $2}')
          
          # インストールされているcaskの一覧を取得
          INSTALLED_CASKS=$(brew list --cask)
          
          # 各caskのインストール状態を確認
          for cask in $CASKS; do
            if echo "$INSTALLED_CASKS" | grep -q "$cask"; then
              echo "✅ Cask $cask がインストールされています"
            else
              echo "❌ Cask $cask がインストールされていません"
              exit 1
            fi
          done
          
          # launch_installed_apps関数で起動対象となっているアプリを確認
          echo "🔍 起動対象のアプリ設定を検証中..."
          APP_BUNDLES=(
            "google-chrome:Google Chrome.app"
            "slack:Slack.app"
            "cursor:Cursor.app"
            "android-studio:Android Studio.app"
            "notion:Notion.app"
            "figma:Figma.app"
            "spotify:Spotify.app"
            "zoom:zoom.us.app"
          )
          
          # Brewfileに記載されている全てのCaskが起動対象に含まれているか確認
          for cask in $CASKS; do
            FOUND=false
            for bundle in "${APP_BUNDLES[@]}"; do
              CASK_NAME=$(echo "$bundle" | cut -d: -f1)
              if [ "$cask" = "$CASK_NAME" ]; then
                FOUND=true
                break
              fi
            done
            
            if [ "$FOUND" = "true" ]; then
              echo "✅ Cask $cask は起動対象に含まれています"
            else
              echo "⚠️ Cask $cask は起動対象に含まれていない可能性があります"
            fi
          done
          
          # Xcodeの起動設定を確認
          if grep -q "Xcodeを起動" install.sh; then
            echo "✅ Xcodeの起動処理が追加されています"
          else
            echo "⚠️ Xcodeの起動処理が見つかりません"
          fi
          
          echo "インストールCaskアプリの確認が完了しました ✅"
      
      - name: Mac設定ファイルの確認
        run: |
          # Mac設定ファイルが存在するか確認
          if [ ! -d "$GITHUB_WORKSPACE/macos" ]; then
            echo "⚠️ macosディレクトリが見つかりません"
          else
            echo "✅ macosディレクトリが存在します"
            
            # setup_mac_settings.shが存在するか確認
            if [ ! -f "$GITHUB_WORKSPACE/macos/setup_mac_settings.sh" ]; then
              echo "⚠️ setup_mac_settings.shファイルが見つかりません"
            else
              echo "✅ setup_mac_settings.shファイルが存在します"
              
              # 設定ファイルの内容を確認
              echo "📝 Mac設定ファイルの内容を分析中..."
              SETTING_COUNT=$(grep -v "^#" "$GITHUB_WORKSPACE/macos/setup_mac_settings.sh" | grep -v "^$" | grep -E "defaults write" | wc -l | tr -d ' ')
              echo "🔍 $SETTING_COUNT 個の設定項目が検出されました"
              
              # 主要な設定カテゴリを確認
              if grep -q "Dock" "$GITHUB_WORKSPACE/macos/setup_mac_settings.sh"; then
                echo "✅ Dock設定が含まれています"
              fi
              
              if grep -q "Finder" "$GITHUB_WORKSPACE/macos/setup_mac_settings.sh"; then
                echo "✅ Finder設定が含まれています"
              fi
              
              if grep -q "screenshots" "$GITHUB_WORKSPACE/macos/setup_mac_settings.sh"; then
                echo "✅ スクリーンショットの保存先の設定が含まれています"
              fi
            fi
          fi
          
          echo "Mac設定ファイルの確認が完了しました ✅"
      
      - name: インストールスクリプトの修正が有効か検証
        run: |
          echo "修正したインストールスクリプトの検証:"
          
          # 1. Homebrew PATH問題の修正を確認
          if grep -q 'eval "$(/opt/homebrew/bin/brew shellenv)"' install.sh; then
            echo "✅ Homebrew PATH即時有効化の修正が含まれています"
          else
            echo "❌ Homebrew PATH即時有効化の修正が見つかりません"
          fi
          
          # 2. Xcodeインストールの待機問題の修正を確認
          if grep -q "if ! install_xcode" install.sh && ! grep -q "XCODE_PID" install.sh; then
            echo "✅ Xcodeインストールの同期実行の修正が含まれています"
          else
            echo "❌ Xcodeインストールの待機処理に問題があります"
          fi
          
          # 3. SwiftLintがXcodeインストール後に直接インストールされる処理の確認
          if grep -q "Xcode インストール後に SwiftLint をインストール" install.sh && grep -q "brew install swiftlint" install.sh; then
            echo "✅ SwiftLintが直接インストールされる処理が含まれています"
          else
            echo "❌ SwiftLintのインストール処理に問題があります"
          fi
          
          # 4. エラートラッキングの改善を確認
          if grep -q "INSTALL_SUCCESS=" install.sh; then
            echo "✅ インストール成功/失敗のトラッキングが実装されています"
          else
            echo "❌ インストール状態のトラッキングが見つかりません"
          fi
          
          # 5. アプリ起動機能の改善を確認
          if grep -q "launch_installed_apps" install.sh; then
            echo "✅ アプリ起動機能の改善が含まれています"
          else
            echo "❌ アプリ起動機能の改善が見つかりません"
          fi
          
          echo "インストールスクリプトの修正検証が完了しました"

  # 全体の検証結果の表示
  summary:
    needs: test-install
    runs-on: ubuntu-latest
    steps:
      - name: 結果のサマリー
        run: |
          echo "✅ macOS環境構築のCIが正常に完了しました"
          echo "🎉 全てのテストに合格しました！"