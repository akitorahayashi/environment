name: macOS環境構築のCI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手動実行も可能にする

jobs:
  test-install:
    runs-on: macos-latest
    
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v3
      
      - name: インストールスクリプトの実行権限付与
        run: chmod +x install.sh
      
      - name: インストールスクリプトの実行
        run: ./install.sh
        env:
          CI: true  # CI環境であることを示す
        
      - name: Homebrewのインストールの確認
        run: brew --version
        
      - name: Xcodeコマンドラインツールの確認
        run: xcode-select -p
      
      - name: Git設定の確認
        run: |
          test -f ~/.gitconfig && echo "gitconfigが存在します ✅" || (echo "gitconfigが存在しません ❌" && exit 1)
          test -f ~/.gitignore_global && echo "gitignore_globalが存在します ✅" || (echo "gitignore_globalが存在しません ❌" && exit 1)
          
          # シンボリックリンクの検証
          if [ "$(readlink ~/.gitconfig)" = "$GITHUB_WORKSPACE/git/.gitconfig" ]; then
            echo "gitconfigのシンボリックリンクが正しく設定されています ✅"
          else
            echo "gitconfigのシンボリックリンクが正しくありません ❌"
            echo "実際のリンク先: $(readlink ~/.gitconfig)"
            exit 1
          fi
          
          if [ "$(readlink ~/.gitignore_global)" = "$GITHUB_WORKSPACE/git/.gitignore_global" ]; then
            echo "gitignore_globalのシンボリックリンクが正しく設定されています ✅"
          else
            echo "gitignore_globalのシンボリックリンクが正しくありません ❌"
            echo "実際のリンク先: $(readlink ~/.gitignore_global)"
            exit 1
          fi
          
          # excludesfileの設定確認
          if [ "$(git config --global core.excludesfile)" = "$HOME/.gitignore_global" ]; then
            echo "Gitのexcludesfileが正しく設定されています ✅"
          else
            echo "Gitのexcludesfileが正しく設定されていません ❌"
            exit 1
          fi
          
          echo "Git設定の確認が完了しました ✅"
      
      - name: シェル設定の確認
        run: |
          test -f ~/.zprofile && echo ".zprofileが存在します ✅" || (echo ".zprofileが存在しません ❌" && exit 1)
          
          # シンボリックリンクの検証
          if [ "$(readlink ~/.zprofile)" = "$GITHUB_WORKSPACE/shell/.zprofile" ]; then
            echo ".zprofileのシンボリックリンクが正しく設定されています ✅"
          else
            echo ".zprofileのシンボリックリンクが正しくありません ❌"
            echo "実際のリンク先: $(readlink ~/.zprofile)"
            exit 1
          fi
          
          echo "シェル設定の確認が完了しました ✅"
      
      - name: Homebrewパッケージの確認
        run: |
          echo "CI環境で指定された特定のパッケージがインストールされているか確認します"
          
          # 特定のパッケージのリスト
          SPECIFIC_PACKAGES="git xcodes cursor"
          
          for package in $SPECIFIC_PACKAGES; do
            if brew list $package &>/dev/null; then
              echo "$packageがインストールされています ✅"
            else
              echo "$packageがインストールされていません ❌"
              exit 1
            fi
          done
          
          echo "Homebrewパッケージの確認が完了しました ✅"
      
      - name: Flutterの設定の確認
        run: |
          if command -v flutter &>/dev/null; then
            echo "Flutterがインストールされています。基本設定を確認中..."
            # 環境変数の設定確認
            if [ -n "$ANDROID_HOME" ] || [ -n "$ANDROID_SDK_ROOT" ]; then
              echo "Android SDKの環境変数が設定されています ✅"
            else
              echo "Android SDKの環境変数が設定されていません（CI環境では想定内） ⚠️"
            fi
            
            # Flutter doctorのチェック
            flutter --version || echo "Flutterのバージョン確認に失敗しました（CI環境では想定内） ⚠️"
          else
            echo "Flutterがインストールされていません。確認をスキップします"
          fi
      
      - name: スクリプトの冪等性テスト
        env:
          CI: true
        run: |
          echo "インストールスクリプトを再度実行して冪等性をテスト中..."
          # 2回目の実行結果をログファイルに保存
          ./install.sh > idempotency_test_log.txt 2>&1
          
          # 実行が成功したことを確認
          if [ $? -ne 0 ]; then
            echo "2回目の実行が失敗しました ❌"
            cat idempotency_test_log.txt
            exit 1
          fi
          
          # 冪等性の確認：新規インストールが行われていないことを確認
          echo "新規インストールが行われていないか確認中..."
          INSTALL_KEYWORDS=(
            "インストール中"
            "をインストール "
            "➕"  # Brewfileインストール時のマーカー
          )
          
          # 除外すべきパターン（正当なインストールメッセージ）
          EXCLUDE_PATTERNS=(
            "すでにインストールされています"
            "インストールされていません"
            "インストール完了"
            "のインストール完了"
          )
          
          INSTALL_FOUND=false
          for keyword in "${INSTALL_KEYWORDS[@]}"; do
            # インストールメッセージを検出
            if grep -q "$keyword" idempotency_test_log.txt; then
              # 検出された行を取得
              DETECTED_LINES=$(grep "$keyword" idempotency_test_log.txt)
              
              # 除外パターンに一致するかチェック
              EXCLUDE_MATCH=false
              for exclude in "${EXCLUDE_PATTERNS[@]}"; do
                if echo "$DETECTED_LINES" | grep -q "$exclude"; then
                  EXCLUDE_MATCH=true
                  break
                fi
              done
              
              # 除外パターンに一致しない場合のみ警告
              if [ "$EXCLUDE_MATCH" = false ]; then
                echo "警告: 「$keyword」が検出されました。新規インストールが行われている可能性があります ❌"
                echo "$DETECTED_LINES"
                INSTALL_FOUND=true
              fi
            fi
          done
          
          if [ "$INSTALL_FOUND" = true ]; then
            echo "冪等性テスト失敗: 2回目の実行で新規インストールが検出されました ❌"
            exit 1
          else
            echo "新規インストールは行われていません ✅"
          fi
          
          # スキップメッセージの確認（参考情報）
          echo "スキップメッセージの確認中（参考情報）..."
          
          # 主要コンポーネントのスキップメッセージを確認
          SKIP_MESSAGES=(
            "すでにインストールされています"
            "はすでにインストールされています"
          )
          
          for message in "${SKIP_MESSAGES[@]}"; do
            if grep -q "$message" idempotency_test_log.txt; then
              echo "「$message」のスキップメッセージを確認 ✅"
            else
              echo "「$message」のスキップメッセージが見つかりません（警告のみ） ⚠️"
            fi
          done
          
          echo "冪等性テストが完了しました ✅"