name: macOS環境構築のCI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手動実行も可能にする

jobs:
  test-install:
    runs-on: macos-latest
    timeout-minutes: 120  # Xcodeのインストールに時間がかかるため、タイムアウトを延長
    
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v3
      
      - name: GitHub認証の設定
        run: |
          # GitHubの認証を設定 (CI環境用)
          git config --global url."https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
          echo "✅ CI環境用のGitHub認証を設定しました"
      
      - name: インストールスクリプトの実行権限付与
        run: chmod +x install.sh
      
      - name: インストールスクリプトの実行
        run: ./install.sh
        env:
          CI: true  # CI環境であることを示す
          GITHUB_TOKEN_CI: ${{ secrets.GITHUB_TOKEN }}  # GitHub Actions提供のトークンをCI用の名前で渡す
        
      - name: Homebrewのインストールの確認
        run: brew --version
        
      - name: Xcodeのインストール確認
        run: |
          # Xcode Command Line Toolsの確認
          if ! xcode-select -p &>/dev/null; then
            echo "❌ Xcode Command Line Toolsがインストールされていません"
            exit 1
          fi
          echo "✅ Xcode Command Line Toolsがインストールされています"
          
          # Xcode 16.2の確認
          if ! xcodes installed | grep -q "16.2"; then
            echo "❌ Xcode 16.2がインストールされていません"
            exit 1
          fi
          echo "✅ Xcode 16.2がインストールされています"
          
          # シミュレータの確認
          for platform in iOS watchOS tvOS visionOS; do
            if ! xcrun simctl list runtimes | grep -q "$platform"; then
              echo "❌ $platform シミュレータがインストールされていません"
              exit 1
            fi
            echo "✅ $platform シミュレータがインストールされています"
          done
      
      - name: Git設定の確認
        run: |
          test -f ~/.gitconfig && echo "gitconfigが存在します ✅" || (echo "gitconfigが存在しません ❌" && exit 1)
          test -f ~/.gitignore_global && echo "gitignore_globalが存在します ✅" || (echo "gitignore_globalが存在しません ❌" && exit 1)
          
          # シンボリックリンクの検証
          if [ "$(readlink ~/.gitconfig)" = "$GITHUB_WORKSPACE/git/.gitconfig" ]; then
            echo "gitconfigのシンボリックリンクが正しく設定されています ✅"
          else
            echo "gitconfigのシンボリックリンクが正しくありません ❌"
            echo "実際のリンク先: $(readlink ~/.gitconfig)"
            exit 1
          fi
          
          if [ "$(readlink ~/.gitignore_global)" = "$GITHUB_WORKSPACE/git/.gitignore_global" ]; then
            echo "gitignore_globalのシンボリックリンクが正しく設定されています ✅"
          else
            echo "gitignore_globalのシンボリックリンクが正しくありません ❌"
            echo "実際のリンク先: $(readlink ~/.gitignore_global)"
            exit 1
          fi
          
          # excludesfileの設定確認
          if [ "$(git config --global core.excludesfile)" = "$HOME/.gitignore_global" ]; then
            echo "Gitのexcludesfileが正しく設定されています ✅"
          else
            echo "Gitのexcludesfileが正しく設定されていません ❌"
            exit 1
          fi
          
          echo "Git設定の確認が完了しました ✅"
      
      - name: シェル設定の確認
        run: |
          test -f ~/.zprofile && echo ".zprofileが存在します ✅" || (echo ".zprofileが存在しません ❌" && exit 1)
          
          # シンボリックリンクの検証
          if [ "$(readlink ~/.zprofile)" = "$GITHUB_WORKSPACE/shell/.zprofile" ]; then
            echo ".zprofileのシンボリックリンクが正しく設定されています ✅"
          else
            echo ".zprofileのシンボリックリンクが正しくありません ❌"
            echo "実際のリンク先: $(readlink ~/.zprofile)"
            exit 1
          fi
          
          echo "シェルの設定の確認が完了しました ✅"
      
      - name: Homebrewパッケージの確認
        run: |
          echo "Brewfileに記載されたパッケージがインストールされているか確認します"
          
          # Brewfileの存在確認
          if [ ! -f "$GITHUB_WORKSPACE/config/Brewfile" ]; then
            echo "❌ Brewfileが見つかりません"
            exit 1
          fi
          
          # Brewfileに記載されたパッケージを確認
          while IFS= read -r line; do
            # コメント行と空行をスキップ
            [[ $line =~ ^#.*$ ]] && continue
            [[ -z $line ]] && continue
            
            # brew install または brew cask install の行を抽出
            if [[ $line =~ ^(brew|cask)\ install\ ([^#]+) ]]; then
              package="${BASH_REMATCH[2]}"
              if ! brew list "$package" &>/dev/null; then
                echo "❌ $package がインストールされていません"
                exit 1
              fi
              echo "✅ $package がインストールされています"
            fi
          done < "$GITHUB_WORKSPACE/config/Brewfile"
          
          echo "Homebrewパッケージの確認が完了しました ✅"
      
      - name: Flutterの設定の確認
        run: |
          if ! command -v flutter &>/dev/null; then
            echo "❌ Flutterがインストールされていません"
            exit 1
          fi
          
          echo "✅ Flutterがインストールされています"
          
          # Flutterのパスを確認
          FLUTTER_PATH=$(which flutter)
          echo "Flutter PATH: $FLUTTER_PATH"
          
          # パスが正しいか確認 - 標準のHomebrewバイナリパスであることを確認
          if [[ "$FLUTTER_PATH" != "/opt/homebrew/bin/flutter" ]]; then
            echo "❌ Flutterのパスが想定と異なります"
            echo "期待: /opt/homebrew/bin/flutter"
            echo "実際: $FLUTTER_PATH"
            exit 1
          fi
          echo "✅ Flutterのパスが正しく設定されています"
          
          # Flutter doctorを実行して機能確認
          echo "flutter doctor を実行中..."
          if ! flutter doctor -v; then
            echo "❌ flutter doctorの実行に失敗しました"
            exit 1
          fi
          
          # Xcodeの確認
          if ! flutter doctor -v | grep -q "Xcode"; then
            echo "❌ Xcodeが見つかりません"
            exit 1
          fi
          
          echo "✅ Flutterの設定が完了しました"
      
      - name: スクリプトの冪等性テスト
        env:
          CI: true
        run: |
          echo "インストールスクリプトを再度実行して冪等性をテスト中..."
          ./install.sh > idempotency_test_log.txt 2>&1
          
          if [ $? -ne 0 ]; then
            echo "❌ 2回目の実行が失敗しました"
            cat idempotency_test_log.txt
            exit 1
          fi
          
          # 冪等性の確認
          echo "新規インストールが行われていないか確認中..."
          INSTALL_KEYWORDS=(
            "インストール中"
            "をインストール "
            "➕"
            "Xcode 16.2 をインストール中"
            "シミュレータをインストール中"
          )
          
          EXCLUDE_PATTERNS=(
            "すでにインストールされています"
            "インストールされていません"
            "インストール完了"
            "CI環境では"
          )
          
          INSTALL_FOUND=false
          for keyword in "${INSTALL_KEYWORDS[@]}"; do
            if grep -q "$keyword" idempotency_test_log.txt; then
              DETECTED_LINES=$(grep "$keyword" idempotency_test_log.txt)
              
              EXCLUDE_MATCH=false
              for exclude in "${EXCLUDE_PATTERNS[@]}"; do
                if echo "$DETECTED_LINES" | grep -q "$exclude"; then
                  EXCLUDE_MATCH=true
                  break
                fi
              done
              
              if [ "$EXCLUDE_MATCH" = false ]; then
                echo "❌ 警告: 「$keyword」が検出されました"
                echo "$DETECTED_LINES"
                INSTALL_FOUND=true
              fi
            fi
          done
          
          if [ "$INSTALL_FOUND" = true ]; then
            echo "❌ 冪等性テスト失敗: 2回目の実行で新規インストールが検出されました"
            exit 1
          else
            echo "✅ 新規インストールは行われていません"
          fi
          
          echo "✅ 冪等性テストが完了しました"