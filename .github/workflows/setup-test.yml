name: Run Setup Tests

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  setup-test:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set CI environment variables
        run: |
          echo "CI環境変数を設定しています..."
          # Detect JAVA_HOME based on 'java' executable location if available
          if command -v java &> /dev/null; then
            JAVA_PATH=$(readlink -f $(which java))
            JAVA_HOME_DETECTED=$(dirname $(dirname "$JAVA_PATH"))
            echo "JAVA_HOME=${JAVA_HOME_DETECTED}" >> $GITHUB_ENV
            echo "JAVA_HOMEを検出しました: ${JAVA_HOME_DETECTED}"
          else
            echo "警告: 'java' コマンドが見つかりません。JAVA_HOMEの検出をスキップします。"
          fi
          echo "ANDROID_SDK_ROOT=${HOME}/Library/Android/sdk" >> $GITHUB_ENV
          echo "REPO_ROOT=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
          echo "IS_CI=true" >> $GITHUB_ENV
          echo "ALLOW_COMPONENT_FAILURE=true" >> $GITHUB_ENV
          echo "✅ CI環境変数の設定が完了しました"
        shell: bash

      - name: Setup GitHub authentication for Homebrew
        run: |
          echo "🔑 CI環境用のGitHub認証を設定中..."
          # 認証情報を環境変数に設定
          echo "HOMEBREW_GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          # Gitの認証設定
          git config --global url."https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
          echo "✅ GitHub認証の設定が完了しました"
        shell: bash

      - name: Make scripts executable
        run: |
          echo "セットアップスクリプトを実行可能にしています..."
          chmod +x scripts/*.sh
          chmod +x install.sh
          echo "✅ スクリプトが実行可能になりました"

      - name: Run initial installation test
        run: |
          echo "🚀 初回インストールを実行しています..."
          ./install.sh | tee install_output.log
          INSTALL_EXIT_CODE=$?
          
          echo "🔍 インストールの終了コードとログを検証しています..."
          if [ $INSTALL_EXIT_CODE -eq 0 ]; then
            echo "✅ インストールが正常に完了しました (終了コード: 0)"
          else
            echo "❌ インストールが失敗しました (終了コード: $INSTALL_EXIT_CODE)"
            echo "=== インストール出力サンプル (最初の20行) ==="
            head -n 20 install_output.log
            exit 1
          fi
        shell: bash

      - name: Verify Shell Setup
        run: |
          echo "🔍 シェルの設定を検証しています..."
          source ./scripts/shell.sh
          if verify_shell_setup; then
            echo "✅ シェルの検証が成功しました"
          else
            echo "❌ シェルの検証が失敗しました"
            exit 1
          fi
        shell: bash


      - name: Verify Homebrew Setup
        run: |
          echo "🔍 Homebrewのセットアップとパッケージを検証しています..."
          source ./scripts/homebrew.sh
          if verify_homebrew_setup; then
            echo "✅ Homebrewの検証が成功しました"
          else
            echo "❌ Homebrewの検証が失敗しました"
            exit 1
          fi
        shell: bash

      - name: Verify Git Setup
        run: |
          echo "🔍 Gitの設定を検証しています..."
          source ./scripts/git.sh
          if verify_git_setup; then
            echo "✅ Gitの検証が成功しました"
          else
            echo "❌ Gitの検証が失敗しました"
            exit 1
          fi
        shell: bash

      - name: Verify Flutter Setup
        run: |
          echo "🔍 Flutterの検証を開始しています..."
          export PATH="$HOME/fvm/default/bin:$PATH"
          source ./scripts/flutter.sh
          if verify_flutter_setup; then
            echo "✅ Flutterの検証が成功しました"
          else
            echo "❌ Flutterの検証が失敗しました"
            exit 1
          fi
        shell: bash

      - name: Verify Node.js Setup
        run: |
          echo "🔍 Node.jsの検証を開始しています..."
          source ./scripts/node.sh
          if verify_node_setup; then
            echo "✅ Node.jsの検証が成功しました"
          else
            echo "❌ Node.jsの検証が失敗しました"
            exit 1
          fi
        shell: bash

      - name: Verify Ruby Setup
        run: |
          echo "🔍 Rubyの設定を検証しています..."
          source ./scripts/ruby.sh
          if verify_ruby_setup; then
            echo "✅ Rubyの検証が成功しました"
          else
            echo "❌ Rubyの検証が失敗しました"
            exit 1
          fi
        shell: bash

      - name: Verify VS Code Setup
        run: |
          echo "🔍 VS Codeの設定を検証しています..."
          source ./scripts/vscode.sh
          if verify_vscode_setup; then
            echo "✅ VS Codeの検証が成功しました"
          else
            echo "❌ VS Codeの検証が失敗しました"
            exit 1
          fi
        shell: bash

      - name: Verify Cursor Setup
        run: |
          echo "🔍 Cursorの設定を検証しています..."
          source ./scripts/cursor.sh
          if verify_cursor_setup; then
            echo "✅ Cursorの検証が成功しました"
          else
            echo "❌ Cursorの検証が失敗しました"
            exit 1
          fi
        shell: bash

      - name: Verification Summary
        run: |
          echo "======================"
          echo "✅ すべての検証ステップが正常に完了しました！"
          echo "🎉 すべてのテストが正常に完了しました！"
        shell: bash

      - name: Run idempotency test
        run: |
          echo "🔍 冪等性テストを実行しています..."
          ./install.sh --idempotent-test | tee idempotent_output.log
          
          echo "🔍 INSTALL_PERFORMEDの出力を検証しています..."
          if grep -q "INSTALL_PERFORMED" idempotent_output.log; then
            echo "❌ 冪等性テストが失敗しました - 2回目の実行でもインストールが実行されました"
            echo "=== INSTALL_PERFORMEDが検出された箇所 ==="
            grep -n "INSTALL_PERFORMED" idempotent_output.log
            exit 1
          else
            echo "✅ 冪等性テストが正常に完了しました - 2回目の実行では何もインストールされませんでした"
          fi
        shell: bash