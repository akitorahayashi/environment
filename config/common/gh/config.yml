# ==============================================================================
# GitHub CLI (gh) Aliases
#
# This file is managed by the dotfiles repository.
# To update aliases, please modify this file and run `make gh`.
# ==============================================================================
aliases:
  # gh repo aliases
  re-ls: repo list --json name | jq -r '.[].name'
  re-cl: repo clone
  re-cr: |
    !f() {
      local name="$1"
      local desc="$2"
      local is_public="$3"
      if [ -z "$name" ]; then
        echo "Usage: gh re-cr <repo-name> [description] [public(true/false)]" >&2
        return 1
      fi
      if [ "$is_public" = "false" ]; then
        gh repo create "$name" --description "${desc:-}" --private
      else
        gh repo create "$name" --description "${desc:-}" --public
      fi
    }; f "$@"
  # gh pr aliases
  pr-create: |
    !f() {
      local branch="$1"
      local title="$2"
      local body="$3"
      if [ -z "$branch" ] || [ -z "$title" ]; then
        echo "Usage: gh pr-create <branch> <title> [body]" >&2
        return 1
      fi
      gh pr create --head "$branch" --title "$title" --body "${body:-}" --fill
    }; f "$@"
  pr-ls: |
    !f() {
      gh pr list --limit 20 --json number,title,author,headRefName,state --jq '.[] | {number, title, author: .author.login, branch: .headRefName, state}' | while read -r pr; do
        num=$(echo "$pr" | jq -r ".number")
        branch=$(echo "$pr" | jq -r ".branch")
        mergeable=$(gh pr view "$num" --json mergeable --jq ".mergeable")
        running=$(gh run list --branch "$branch" --status in_progress --limit 1 --json databaseId | jq "length")
        has_running_actions=$([ "$running" -gt 0 ] && echo "true" || echo "false")
        echo "$pr" | jq --arg mergeable "$mergeable" --arg has_running "$has_running_actions" '. + {mergeable: $mergeable, actions_in_progress: $has_running}'
      done
    }; f
  pr-mr: |
    !f() {
      local pr_id="$1"
      if [ -z "$pr_id" ]; then
        echo "Usage: gh pr-mr <pr-number>" >&2
        return 1
      fi
      local mergeable
      mergeable=$(gh pr view "$pr_id" --json mergeable --jq ".mergeable")
      if [ "$mergeable" = "MERGEABLE" ]; then
        echo "PR #$pr_id is MERGEABLE. Merging..."
        gh pr merge "$pr_id"
      else
        echo "PR #$pr_id is not mergeable: $mergeable"
        return 2
      fi
    }; f "$@"
  # gh run aliases
  r-ls: run list
  r-w: run watch
  r-ce: run cancel
  r-w-f: |
    !f() {
      id=$(gh run list --jq 'select(.status=="in_progress") | .databaseId' | head -n1)
      if [ -n "$id" ]; then
        echo "Watching workflow run $id ..."
        gh run watch "$id"
      else
        echo "No in_progress workflow found."
      fi
    }; f
  # gh branch aliases
  br-url: |
    !f() {
      local remote_url branch repo_url
      remote_url=$(git config --get remote.origin.url)
      branch=$(git rev-parse --abbrev-ref HEAD)
      repo_url=$(echo "$remote_url" | sed -E "s#git@github.com:(.*)\\.git#https://github.com/\\1#; s#https://github.com/#https://github.com/#; s#\\.git$##")
      echo "${repo_url}/tree/${branch}"
    }; f
  # gh copy file content alias
  cp-f: |
    !f() {
      if [ -z "$1" ]; then
        echo "Usage: gh cp-f <GitHub file URL>"
        return 1
      fi
      raw_url=$(echo "$1" | sed -E "s#https://github.com/([^/]+)/([^/]+)/blob/([^/]+)/(.*)#https://raw.githubusercontent.com/\\1/\\2/\\3/\\4#")
      curl -sL "$raw_url" | pbcopy
      echo "File content copied to clipboard âœ…"
    }; f "$@"
