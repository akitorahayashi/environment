git_protocol: ssh
prompt: disabled
spinner: enabled
aliases:
    # gh repo aliases
    re-ls: 'repo list --limit 18 --json name,url,pushedAt --jq "sort_by(.pushedAt) | reverse | .[] | \"【\\(.name)】: \\(.url)\""'
    re-cl: repo clone
    # gh pr aliases
    pr-cr: "!f() {\n  local branch=\"$1\"\n  if [ -z \"$branch\" ]; then\n    echo \"Usage: gh pr-cr <branch>\" >&2\n    return 1\n  fi\n  \n  # Get the base branch (usually main or master)\n  local base_branch\n  base_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@' || echo \"main\")\n  \n  # Get diff between base and target branch\n  local diff_content\n  diff_content=$(git diff \"${base_branch}...${branch}\")\n  \n  if [ -z \"$diff_content\" ]; then\n    echo \"No changes found between ${base_branch} and ${branch}\" >&2\n    return 1\n  fi\n  \n  # Generate title and body using gh copilot\n  echo \"Generating PR title and body using GitHub Copilot...\"\n  local pr_content\n  pr_content=$(echo \"$diff_content\" | gh copilot suggest \"Generate a concise PR title (max 72 chars) and detailed body based on this git diff. Format as 'TITLE: <title>' followed by 'BODY:' and the body content.\")\n  \n  # Extract title and body from copilot response\n  local title body\n  title=$(echo \"$pr_content\" | grep \"^TITLE:\" | sed 's/^TITLE: //')\n  body=$(echo \"$pr_content\" | sed -n '/^BODY:/,$p' | sed '1d')\n  \n  if [ -z \"$title\" ]; then\n    echo \"Failed to generate title. Creating PR with manual input required...\" >&2\n    gh pr create --head \"$branch\"\n  else\n    echo \"Generated Title: $title\"\n    echo \"Generated Body: $body\"\n    gh pr create --head \"$branch\" --title \"$title\" --body \"$body\"\n  fi\n}; f \"$@\"\n"
    pr-ls: |
        !f() {
          gh pr list --limit 20 --json number,title,author,headRefName,state --jq '.[] | {number, title, author: .author.login, branch: .headRefName, state}' | while read -r pr; do
            num=$(echo "$pr" | jq -r ".number")
            branch=$(echo "$pr" | jq -r ".branch")
            mergeable=$(gh pr view "$num" --json mergeable --jq ".mergeable")
            running=$(gh run list --branch "$branch" --status in_progress --limit 1 --json databaseId | jq "length")
            has_running_actions=$([ "$running" -gt 0 ] && echo "true" || echo "false")
            echo "$pr" | jq --arg mergeable "$mergeable" --arg has_running "$has_running_actions" '. + {mergeable: $mergeable, actions_in_progress: $has_running}'
          done
        }; f
    pr-mr: |
        !f() {
          local pr_id="$1"
          if [ -z "$pr_id" ]; then
            echo "Usage: gh pr-mr <pr-number>" >&2
            return 1
          fi
          local mergeable
          mergeable=$(gh pr view "$pr_id" --json mergeable --jq ".mergeable")
          if [ "$mergeable" = "MERGEABLE" ]; then
            echo "PR #$pr_id is MERGEABLE. Merging..."
            gh pr merge "$pr_id"
          else
            echo "PR #$pr_id is not mergeable: $mergeable"
            return 2
          fi
        }; f "$@"
    # gh copy file content alias
    cp-f: |-
        !f() {
          if [ -z "$1" ]; then
            echo "Usage: gh cp-f <GitHub file URL>"
            return 1
          fi
          raw_url=$(echo "$1" | sed -E "s#https://github.com/([^/]+)/([^/]+)/blob/([^/]+)/(.*)#https://raw.githubusercontent.com/\\1/\\2/\\3/\\4#")
          curl -sL "$raw_url" | pbcopy
          echo "File content copied to clipboard ✅"
        }; f "$@"
version: "1"
